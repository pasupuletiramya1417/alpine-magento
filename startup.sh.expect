#!/bin/sh
#nginx
if [ "$VERBOSE" = "true" ]; then
	mkdir -p /var/log/nginx
	touch /var/log/nginx/error.log /var/log/nginx/access.log
	tail -f /var/log/nginx/*.log &
fi
chown -R nginx:nginx /var/www
nginx -g 'daemon off;' &
#php
if [[ "$VERBOSE" == "true" ]]; then
	touch /var/log/php7/error.log
	tail -f /var/log/php7/*.log &
fi

chown -R nobody:nobody /var/www
php-fpm7 -F &
#rabbitmq
rabbitmq-server &
#elasticsearch
su - elasticsearch -c /usr/share/elasticsearch/bin/elasticsearch &
#redis
redis-server /etc/redis.conf &
#varnish
varnishd -f /etc/varnish/default.vcl &
#mysql
if [ ! -d "/run/mysqld" ]; then
  mkdir -p /run/mysqld
fi

if [ -d /var/lib/mysql ]; then
  echo "[i] MySQL directory already present, skipping creation"
else
  echo "[i] MySQL data directory not found, creating initial DBs"

  mysql_install_db --user=root > /dev/null

  if [ "$MYSQL_ROOT_PASSWORD" = "" ]; then
    MYSQL_ROOT_PASSWORD=root
    echo "[i] MySQL root Password: $MYSQL_ROOT_PASSWORD"
  fi

  MYSQL_DATABASE=${MYSQL_DATABASE:-"magento"}
  MYSQL_USER=${MYSQL_USER:-"magento"}
  MYSQL_PASSWORD=${MYSQL_PASSWORD:-"magento"}

  tfile=`mktemp`
  if [ ! -f "$tfile" ]; then
      return 1
  fi

  cat << EOF > $tfile
USE mysql;
FLUSH PRIVILEGES;
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY "$MYSQL_ROOT_PASSWORD" WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;
#ALTER USER 'root'@'localhost' IDENTIFIED BY '';
EOF

  if [ "$MYSQL_DATABASE" != "" ]; then
    echo "[i] Creating database: $MYSQL_DATABASE"
    echo "CREATE DATABASE IF NOT EXISTS \`$MYSQL_DATABASE\` CHARACTER SET utf8 COLLATE utf8_general_ci;" >> $tfile

    if [ "$MYSQL_USER" != "" ]; then
      echo "[i] Creating user: $MYSQL_USER with password $MYSQL_PASSWORD"
      echo "GRANT ALL ON \`$MYSQL_DATABASE\`.* to '$MYSQL_USER'@'%' IDENTIFIED BY '$MYSQL_PASSWORD';" >> $tfile
    fi
  fi

  /usr/bin/mysqld --user=root --bootstrap --verbose=0 --skip-networking=0 < $tfile
  rm -f $tfile
fi


exec /usr/bin/mysqld --user=root --console --skip-networking=0 &
#MY_SECURE_INSTALLATION
  MYSQL_ROOT_PASSWORD='root'
  MYSQL=$(grep 'temporary password' /var/log/mysqld.log | awk '{print $11}')

  SECURE_MYSQL=$(expect -c "

  set timeout 10
  spawn mysql_secure_installation

  expect \"Enter password for user root:\"
  send \"$MYSQL\r\"
  expect \"New password:\"
  send \"$MYSQL_ROOT_PASSWORD\r\"
  expect \"Re-enter new password:\"
  send \"$MYSQL_ROOT_PASSWORD\r\"
  expect \"Change the password for root ?\ ((Press y\|Y for Yes, any other key for No) :\"
  send \"y\r\"
  send \"$MYSQL\r\"
  expect \"New password:\"
  send \"$MYSQL_ROOT_PASSWORD\r\"
  expect \"Re-enter new password:\"
  send \"$MYSQL_ROOT_PASSWORD\r\"
  expect \"Do you wish to continue with the password provided?\(Press y\|Y for Yes, any other key for No) :\"
  send \"y\r\"
  expect \"Remove anonymous users?\(Press y\|Y for Yes, any other key for No) :\"
  send \"y\r\"
  expect \"Disallow root login remotely?\(Press y\|Y for Yes, any other key for No) :\"
  send \"n\r\"
  expect \"Remove test database and access to it?\(Press y\|Y for Yes, any other key for No) :\"
  send \"y\r\"
  expect \"Reload privilege tables now?\(Press y\|Y for Yes, any other key for No) :\"
  send \"y\r\"
  expect eof
  ")

  echo $SECURE_MYSQL
#MAGENTO_SSH  
composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition /var/www/html/magento
#sleep 20
mv /di.xml /var/www/html/magento/app/etc/
cd /var/www/html/magento
php bin/magento setup:install --base-url=http://alpinehack.com --db-host=localhost --db-name=magento --db-user=magento --db-password=magento --admin-firstname=admin --admin-lastname=admin --admin-email=praneethpathange@gmail.com --admin-user=shannu --admin-password=kspl@1234 --language=en_US --currency=GBP --timezone=Europe/London --use-rewrites=1

php bin/magento se:up
php bin/magento c:c 
php bin/magento c:f 
php bin/magento setup:di:compile
php bin/magento setup:static-content:deploy -f
php bin/magento c:c 
php bin/magento c:f 
ln -s /usr/share/phpmyadmin/ /var/www/html/
chown -R nginx:nginx /etc/phpmyadmin 
chown -R nginx:nginx /var/www/html 
find var generated vendor pub/static pub/media app/etc -type f -exec chmod g+w {} + && find var generated vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} + && chown -R :www-data . && chmod u+x bin/magento
chmod -R 777 var generated 
rm -rf /ioncube 
apk del apache2
rm -rf /etc/apache2
mkdir -p /var/run/sshd
echo '%wheel ALL=(ALL) ALL' > /etc/sudoers.d/wheel
adduser magento -D -g 1000
adduser magento wheel
echo "magento:magento" |chpasswd
sed -ie "s/#PubkeyAuthentication/PubkeyAuthentication/g" /etc/ssh/sshd_config
echo "RSAAuthentication yes" >> /etc/ssh/sshd_config
#echo "ChallengeResponseAuthentication no" >> /etc/ssh/sshd_config
sed -ie "s/#PasswordAuthentication yes/PasswordAuthentication yes/g" /etc/ssh/sshd_config
sed -ie "s/#Port 22/Port 22/g" /etc/ssh/sshd_config
sed -ie "s/#ListenAddress 0.0.0.0/ListenAddress 0.0.0.0/g" /etc/ssh/sshd_config
sed -ie "s/#HostKey \/etc\/ssh\/ssh_host_ecdsa_key/HostKey \/etc\/ssh\/ssh_host_ecdsa_key/g" /etc/ssh/sshd_config
sed -ie "s/#HostKey \/etc\/ssh\/ssh_host_rsa_key/HostKey \/etc\/ssh\/ssh_host_rsa_key/g" /etc/ssh/sshd_config
sed -ie "s/#HostKey \/etc\/ssh\/ssh_host_ed25519_key/HostKey \/etc\/ssh\/ssh_host_ed25519_key/g" /etc/ssh/sshd_config
mkdir  ~/.ssh
ssh-keygen -t rsa -f /root/.ssh/id_rsa -q -P ""
touch ~/.ssh/authorized_keys
chmod -R 600 ~/.ssh/*
echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
chown -R magento:magento ~/.ssh
chmod -R 700 ~/.ssh
rm -rf /etc/ssh/ssh_host_rsa_key /etc/ssh/ssh_host_dsa_key /etc/ssh/ssh_host_rsa_key.pub /etc/ssh/ssh_host_dsa_key.pub
ssh-keygen -A
/usr/sbin/sshd -D -e -f /etc/ssh/sshd_config
